// Schema pentru Aplicația E-Registratură
// Conform Legii nr. 201/2024 și Ghidul Digitalizării - Arhivele Naționale
// JavaScript Project - fără TypeScript

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum-uri pentru statusuri și tipuri
enum StatusFond {
  activ
  inactiv
  arhivat
}

enum TipRegistru {
  intrare
  iesire
  intern
  intrare_iesire
}

enum Confidentialitate {
  public
  confidential
  secret
}

enum Prioritate {
  normala
  urgenta
  foarte_urgenta
}

enum TipProcesareAI {
  ocr
  clasificare
  extractie_entitati
  rezumat
}

enum StatusProcesareAI {
  pending
  processing
  completed
  failed
}

// Entități principale

// Primării și Utilizatori
model Primaria {
  id          String   @id @default(uuid())
  nume        String
  codSiruta   String?  @unique @map("cod_siruta")
  judet       String?
  localitate  String?
  adresa      String?
  contactInfo Json?    @map("contact_info")
  configurari Json?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relații
  utilizatori   Utilizator[]
  departamente  Departament[]
  fonduriArhiva FondArhiva[]

  @@map("primarii")
}

model Utilizator {
  id                  String    @id @default(uuid())
  email               String    @unique
  parolaHash          String    @map("parola_hash")
  nume                String
  prenume             String
  functie             String?
  telefon             String?
  primariaId          String    @map("primaria_id")
  activ               Boolean   @default(true)
  emailVerificat      Boolean   @default(false) @map("email_verificat")
  ultimaLogare        DateTime? @map("ultima_logare")
  tokenResetare       String?   @map("token_resetare")
  tokenResetareExpira DateTime? @map("token_resetare_expira")
  preferinte          Json      @default("{}")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  // Relații
  primaria                Primaria                @relation(fields: [primariaId], references: [id])
  departamente            UtilizatorDepartament[]
  responsabilDepartamente Departament[]           @relation("ResponsabilDepartament")
  roluri                  UtilizatorRol[]
  rolAcordat              UtilizatorRol[]         @relation("AcordatDe")
  auditLog                AuditLog[]
  istoricDocumente        IstoricFisier[]         @relation("ModificatDe")
  destinatarInregistrari  Inregistrare[]          @relation("DestinatarInregistrare")

  @@map("utilizatori")
}

// Tabelă de joncțiune pentru relația many-to-many între Utilizatori și Departamente
model UtilizatorDepartament {
  id             String   @id @default(uuid())
  utilizatorId   String   @map("utilizator_id")
  departamentId  String   @map("departament_id")
  rolDepartament String?  @map("rol_departament") // Ex: "administrator", "membru", "secretar"
  dataAtribuire  DateTime @default(now()) @map("data_atribuire")
  activ          Boolean  @default(true)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relații
  utilizator  Utilizator  @relation(fields: [utilizatorId], references: [id], onDelete: Cascade)
  departament Departament @relation(fields: [departamentId], references: [id], onDelete: Cascade)

  @@unique([utilizatorId, departamentId])
  @@map("utilizator_departamente")
}

// Fonduri și Organizare Arhivistică
model FondArhiva {
  id                  String     @id @default(uuid())
  primariaId          String     @map("primaria_id")
  nume                String
  cod                 String     @unique
  descriere           String?
  perioadaAcoperire   String?    @map("perioada_acoperire") // Va fi stocat ca string pentru PostgreSQL DATERANGE
  status              StatusFond @default(activ)
  metadateArhivistice Json?      @map("metadate_arhivistice")
  createdAt           DateTime   @default(now()) @map("created_at")
  updatedAt           DateTime   @updatedAt @map("updated_at")

  // Relații
  primaria           Primaria             @relation(fields: [primariaId], references: [id])
  diagrameOrganizare DiagramaOrganizare[]

  @@map("fonduri_arhiva")
}

model DiagramaOrganizare {
  id                   String   @id @default(uuid())
  fondArhivaId         String   @map("fond_arhiva_id")
  nume                 String
  versiune             Int      @default(1)
  structura            Json
  perioadaValabilitate String?  @map("perioada_valabilitate") // PostgreSQL DATERANGE
  activa               Boolean  @default(true)
  createdAt            DateTime @default(now()) @map("created_at")

  // Relații
  fondArhiva FondArhiva @relation(fields: [fondArhivaId], references: [id])

  @@map("diagrame_organizare")
}

// Departamente și Registre
model Departament {
  id            String   @id @default(uuid())
  primariaId    String   @map("primaria_id")
  nume          String
  cod           String
  descriere     String?
  responsabilId String?  @map("responsabil_id")
  telefon       String?
  email         String?
  activ         Boolean  @default(true)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @map("updated_at")

  // Relații
  primaria    Primaria                @relation(fields: [primariaId], references: [id])
  responsabil Utilizator?             @relation("ResponsabilDepartament", fields: [responsabilId], references: [id])
  utilizatori UtilizatorDepartament[]
  registre    Registru[]

  @@unique([primariaId, cod])
  @@map("departamente")
}

model Registru {
  id            String      @id @default(uuid())
  departamentId String      @map("departament_id")
  nume          String
  cod           String
  descriere     String?
  tipRegistru   TipRegistru @map("tip_registru")
  an            Int         @default(dbgenerated("EXTRACT(YEAR FROM now())::int"))
  activ         Boolean     @default(true)
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @default(now()) @map("updated_at")

  // Relații
  departament    Departament      @relation(fields: [departamentId], references: [id])
  inregistrari   Inregistrare[]
  tipuriDocument TipDocument[]

  @@unique([departamentId, cod])
  @@unique([departamentId, nume, an])
  @@map("registre")
}

// Tipuri de documente specifice fiecărui registru
model TipDocument {
  id              String   @id @default(uuid())
  registruId      String   @map("registru_id")
  categorieId     String?  @map("categorie_id") // Adaugă relația cu categoria
  nume            String
  cod             String
  descriere       String?
  activ           Boolean  @default(true)
  ordineSortare   Int?     @map("ordine_sortare") @default(0)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @map("updated_at")

  // Relații
  registru     Registru           @relation(fields: [registruId], references: [id], onDelete: Cascade)
  categorie    CategorieDocument? @relation(fields: [categorieId], references: [id]) // Noua relație
  inregistrari Inregistrare[]

  @@unique([registruId, cod])
  @@map("tipuri_documente")
}

// Înregistrări în Registratură
model Inregistrare {
  id                String             @id @default(uuid())
  registruId        String             @map("registru_id")
  tipDocumentId     String?            @map("tip_document_id")
  numarInregistrare String             @map("numar_inregistrare")
  dataInregistrare  DateTime           @default(now()) @map("data_inregistrare") @db.Date
  expeditor         String?
  destinatarId      String?            @map("destinatar_id")
  destinatar        String?            // DEPRECATED: Use destinatarId
  obiect            String
  observatii        String?
  urgent            Boolean            @default(false)
  confidential      Boolean            @default(false)
  status            StatusInregistrare @default(activa)
  confidentialitateId String? @map("confidentialitate_id")
  numarDocument      String?            @map("numar_document")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  // Relații
  registru    Registru     @relation(fields: [registruId], references: [id])
  tipDocument TipDocument? @relation(fields: [tipDocumentId], references: [id])
  fisiere     Fisier[]
  confidentialitate ConfidentialitateDocument? @relation(fields: [confidentialitateId], references: [id])
  destinatarUtilizator Utilizator? @relation("DestinatarInregistrare", fields: [destinatarId], references: [id])
  auditLog    AuditLog[]

  @@unique([registruId, numarInregistrare, dataInregistrare], name: "unique_registration")
  @@map("inregistrari")
}

enum StatusInregistrare {
  activa
  finalizata
  anulata
}

// Categorii de documente
model CategorieDocument {
  id                       String             @id @default(uuid())
  nume                     String
  cod                      String
  descriere                String?
  perioadaRetentie         Int?               @map("perioada_retentie") // în ani
  confidentialitateDefaultId String? @map("confidentialitate_default_id")
  confidentialitateDefault ConfidentialitateDocument? @relation("ConfidentialitateDefaultCategorie", fields: [confidentialitateDefaultId], references: [id])
  metadateObligatorii      Json?              @map("metadate_obligatorii")
  active                   Boolean            @default(true)
  createdAt                DateTime           @default(now()) @map("created_at")

  // Relații
  fisiere      Fisier[]
  tipuriDocument TipDocument[] // Noua relație inversă

  @@map("categorii_documente")
}

// Fișiere și anexe
model Fisier {
  id             String  @id @default(uuid())
  inregistrareId String? @map("inregistrare_id") // Opțional - un fișier poate exista fără înregistrare
  categorieId    String? @map("categorie_id")
  numeOriginal   String  @map("nume_original")
  numeFisierDisk String  @map("nume_fisier_disk")
  extensie       String?
  marime         BigInt?
  tipMime        String? @map("tip_mime")
  hashFisier     String? @map("hash_fisier")
  caleRelativa   String  @map("cale_relativa")
  scanat         Boolean @default(false)
  ocrProcesat    Boolean @default(false) @map("ocr_procesat")
  continutText   String? @map("continut_text")
  miniaturaPath  String? @map("miniatura_path")

  // Informații despre conținutul documentului (specifice fișierului)
  subiect           String? // Subiectul documentului din fișier
  dataFisier        DateTime? @map("data_fisier") @db.Date // Data documentului din fișier
  confidentialitate Confidentialitate @default(public)
  prioritate        Prioritate        @default(normala)
  termene           Json?
  codBare           String?           @unique @map("cod_bare")
  qrCode            String?           @map("qr_code")

  metadate  Json?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  // Relații
  inregistrare Inregistrare?      @relation(fields: [inregistrareId], references: [id], onDelete: Cascade)
  categorie    CategorieDocument? @relation(fields: [categorieId], references: [id])
  auditLog     AuditLog[]
  istoric      IstoricFisier[]
  procesariAI  AIProcesare[]

  @@map("fisiere")
}

// Roluri și Permisiuni
model Rol {
  id         String   @id @default(uuid())
  nume       String   @unique
  descriere  String?
  nivelAcces Int      @default(1) @map("nivel_acces")
  activ      Boolean  @default(true)
  sistem     Boolean  @default(false)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  // Relații
  permisiuni  RolPermisiune[]
  utilizatori UtilizatorRol[]

  @@map("roluri")
}

model Permisiune {
  id        String   @id @default(uuid())
  nume      String   @unique
  descriere String?
  modul     String
  actiune   String
  createdAt DateTime @default(now()) @map("created_at")

  // Relații
  roluri RolPermisiune[]

  @@map("permisiuni")
}

model RolPermisiune {
  id           String @id @default(uuid())
  rolId        String @map("rol_id")
  permisiuneId String @map("permisiune_id")

  // Relații
  rol        Rol        @relation(fields: [rolId], references: [id], onDelete: Cascade)
  permisiune Permisiune @relation(fields: [permisiuneId], references: [id], onDelete: Cascade)

  @@unique([rolId, permisiuneId])
  @@map("rol_permisiuni")
}

model UtilizatorRol {
  id           String   @id @default(uuid())
  utilizatorId String   @map("utilizator_id")
  rolId        String   @map("rol_id")
  acordatDe    String?  @map("acordat_de")
  acordatLa    DateTime @default(now()) @map("acordat_la")
  activ        Boolean  @default(true)

  // Relații
  utilizator          Utilizator  @relation(fields: [utilizatorId], references: [id], onDelete: Cascade)
  rol                 Rol         @relation(fields: [rolId], references: [id], onDelete: Cascade)
  acordatDeUtilizator Utilizator? @relation("AcordatDe", fields: [acordatDe], references: [id])

  @@unique([utilizatorId, rolId])
  @@map("utilizator_roluri")
}

// Audit și Istoric
model AuditLog {
  id             String   @id @default(uuid())
  utilizatorId   String?  @map("utilizator_id")
  fisierId       String?  @map("fisier_id")
  inregistrareId String?  @map("inregistrare_id")
  actiune        String
  detalii        Json?
  ipAddress      String?  @map("ip_address")
  userAgent      String?  @map("user_agent")
  createdAt      DateTime @default(now()) @map("created_at")

  // Relații
  utilizator   Utilizator?   @relation(fields: [utilizatorId], references: [id])
  fisier       Fisier?       @relation(fields: [fisierId], references: [id])
  inregistrare Inregistrare? @relation(fields: [inregistrareId], references: [id])

  @@map("audit_log")
}

model IstoricFisier {
  id          String   @id @default(uuid())
  fisierId    String   @map("fisier_id")
  versiune    Int
  modificari  Json
  modificatDe String   @map("modificat_de")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relații
  fisier     Fisier     @relation(fields: [fisierId], references: [id])
  utilizator Utilizator @relation("ModificatDe", fields: [modificatDe], references: [id])

  @@map("istoric_fisiere")
}

// AI Procesări
model AIProcesare {
  id           String            @id @default(uuid())
  fisierId     String            @map("fisier_id")
  tipProcesare TipProcesareAI    @map("tip_procesare")
  status       StatusProcesareAI @default(pending)
  caleRezultat String?           @map("cale_rezultat")
  confidenta   Float?
  createdAt    DateTime          @default(now()) @map("created_at")
  completedAt  DateTime?         @map("completed_at")

  // Relații
  fisier Fisier @relation(fields: [fisierId], references: [id])

  @@map("ai_procesari")
}

// Niveluri de confidențialitate pentru documente
model ConfidentialitateDocument {
  id          String   @id @default(uuid())
  cod         String   @unique
  denumire    String
  descriere   String?
  activ       Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relații
  inregistrari Inregistrare[]
  categoriiDocumente CategorieDocument[] @relation("ConfidentialitateDefaultCategorie")

  @@map("confidentialitati_documente")
}

// N8N Chat Histories
model n8n_chat_histories {
  id         Int      @id @default(autoincrement())
  sessionId  String   @map("session_id")
  message    Json     @db.JsonB
  @@map("n8n_chat_histories")
}
